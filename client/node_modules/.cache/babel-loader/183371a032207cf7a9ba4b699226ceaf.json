{"ast":null,"code":"import actionTypes from './types';\nimport { developmentApiCall } from '../../../services/api';\nimport { HTTP } from '../../../services/constants';\nimport storage from '../../../services/storage';\nexport const login = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await developmentApiCall(`/login`, null, null, HTTP.GET, null);\n    dispatch({\n      type: actionTypes.LOGIN,\n      payload: data\n    });\n    return {\n      success: true,\n      url: data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response.data\n    };\n  }\n};\nexport const redirect = queryString => async dispatch => {\n  try {\n    const {\n      data\n    } = await developmentApiCall(`/redirect${queryString}`, null, null, HTTP.GET, null);\n    if (!data.access_token) return {\n      success: false,\n      error: data.message\n    };\n    storage.setAuth(data);\n    dispatch({\n      type: actionTypes.REDIRECT,\n      payload: data\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response.data\n    };\n  }\n};\nexport const logout = () => async dispatch => {\n  try {\n    storage.removeAuth();\n    dispatch({\n      type: actionTypes.LOGOUT\n    });\n    return {\n      success: true\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.response.data\n    };\n  }\n};","map":{"version":3,"sources":["/Users/mjiyan/Desktop/mercedes-coding-challenge/client/src/redux/actions/Account/index.js"],"names":["actionTypes","developmentApiCall","HTTP","storage","login","dispatch","data","GET","type","LOGIN","payload","success","url","error","response","redirect","queryString","access_token","message","setAuth","REDIRECT","logout","removeAuth","LOGOUT"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,SAAxB;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,IAAT,QAAqB,6BAArB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAGA,OAAO,MAAMC,KAAK,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC3C,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,kBAAkB,CACtC,QADsC,EAEvC,IAFuC,EAGvC,IAHuC,EAIvCC,IAAI,CAACK,GAJkC,EAKvC,IALuC,CAAzC;AAOAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WAAW,CAACS,KADX;AAEPC,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAIA,WAAO;AAAEK,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,GAAG,EAAEN;AAAtB,KAAP;AACD,GAbD,CAaE,OAAOO,KAAP,EAAc;AACd,WAAO;AAAEF,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeR;AAAxC,KAAP;AACD;AACF,CAjBM;AAmBP,OAAO,MAAMS,QAAQ,GAAIC,WAAD,IAAiB,MAAMX,QAAN,IAAkB;AACzD,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAML,kBAAkB,CACtC,YAAWe,WAAY,EADe,EAEvC,IAFuC,EAGvC,IAHuC,EAIvCd,IAAI,CAACK,GAJkC,EAKvC,IALuC,CAAzC;AAOA,QAAI,CAACD,IAAI,CAACW,YAAV,EACE,OAAO;AAAEN,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,KAAK,EAAEP,IAAI,CAACY;AAA9B,KAAP;AAEFf,IAAAA,OAAO,CAACgB,OAAR,CAAgBb,IAAhB;AAEAD,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WAAW,CAACoB,QADX;AAEPV,MAAAA,OAAO,EAAEJ;AAFF,KAAD,CAAR;AAIA,WAAO;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD,GAlBD,CAkBE,OAAOE,KAAP,EAAc;AACd,WAAO;AAAEF,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeR;AAAxC,KAAP;AACD;AACF,CAtBM;AA0BP,OAAO,MAAMe,MAAM,GAAG,MAAM,MAAMhB,QAAN,IAAkB;AAC5C,MAAI;AAEFF,IAAAA,OAAO,CAACmB,UAAR;AACAjB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WAAW,CAACuB;AADX,KAAD,CAAR;AAGA,WAAO;AAAEZ,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD,GAPD,CAOE,OAAOE,KAAP,EAAc;AACd,WAAO;AAAEF,MAAAA,OAAO,EAAE,KAAX;AAAkBE,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeR;AAAxC,KAAP;AACD;AAEF,CAZM","sourcesContent":["import actionTypes from './types';\nimport { developmentApiCall } from '../../../services/api';\nimport { HTTP } from '../../../services/constants';\nimport storage from '../../../services/storage'\n\n\nexport const login = () => async dispatch => {\n  try {\n    const { data } = await developmentApiCall(\n      `/login`,\n      null,\n      null,\n      HTTP.GET,\n      null\n    );\n    dispatch({\n      type: actionTypes.LOGIN,\n      payload: data\n    });\n    return { success: true, url: data };\n  } catch (error) {\n    return { success: false, error: error.response.data };\n  }\n};\n\nexport const redirect = (queryString) => async dispatch => {\n  try {\n    const { data } = await developmentApiCall(\n      `/redirect${queryString}`,\n      null,\n      null,\n      HTTP.GET,\n      null\n    );\n    if (!data.access_token)\n      return { success: false, error: data.message };\n\n    storage.setAuth(data);\n\n    dispatch({\n      type: actionTypes.REDIRECT,\n      payload: data\n    });\n    return { success: true };\n  } catch (error) {\n    return { success: false, error: error.response.data };\n  }\n};\n\n\n\nexport const logout = () => async dispatch => {\n  try {\n\n    storage.removeAuth();\n    dispatch({\n      type: actionTypes.LOGOUT\n    });\n    return { success: true };\n  } catch (error) {\n    return { success: false, error: error.response.data };\n  }\n\n};\n"]},"metadata":{},"sourceType":"module"}